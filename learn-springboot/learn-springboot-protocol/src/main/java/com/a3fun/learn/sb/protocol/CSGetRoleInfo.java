// automatically generated by the FlatBuffers compiler, do not modify

package com.a3fun.learn.sb.protocol;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CSGetRoleInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static CSGetRoleInfo getRootAsCSGetRoleInfo(ByteBuffer _bb) { return getRootAsCSGetRoleInfo(_bb, new CSGetRoleInfo()); }
  public static CSGetRoleInfo getRootAsCSGetRoleInfo(ByteBuffer _bb, CSGetRoleInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CSGetRoleInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String roleId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer roleIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer roleIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }

  public static int createCSGetRoleInfo(FlatBufferBuilder builder,
      int role_idOffset) {
    builder.startTable(1);
    CSGetRoleInfo.addRoleId(builder, role_idOffset);
    return CSGetRoleInfo.endCSGetRoleInfo(builder);
  }

  public static void startCSGetRoleInfo(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addRoleId(FlatBufferBuilder builder, int roleIdOffset) { builder.addOffset(0, roleIdOffset, 0); }
  public static int endCSGetRoleInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CSGetRoleInfo get(int j) { return get(new CSGetRoleInfo(), j); }
    public CSGetRoleInfo get(CSGetRoleInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

